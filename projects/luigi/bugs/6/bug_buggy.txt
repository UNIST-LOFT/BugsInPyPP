pytest test/parameter_test.py::TestParametersHashability::test_list_dict
pytest test/parameter_test.py::TestParametersHashability::test_tuple_dict
RUN EVERY COMMAND
0


============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/projects/luigi
plugins: sugar-0.9.3, benchmark-3.2.3, sanic-1.6.1, cov-2.9.0
collected 1 item

test/parameter_test.py F                                                 [100%]

=================================== FAILURES ===================================
___________________ TestParametersHashability.test_list_dict ___________________

self = <parameter_test.TestParametersHashability testMethod=test_list_dict>

    def test_list_dict(self):
        class Foo(luigi.Task):
            args = luigi.parameter.ListParameter()
    
        p = luigi.parameter.ListParameter()
>       self.assertEqual(hash(Foo(args=[{'foo': 'bar'}, {'doge': 'wow'}]).args),
                         hash(p.normalize(p.parse('[{"foo": "bar"}, {"doge": "wow"}]'))))

test/parameter_test.py:385: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/luigi/luigi/task_register.py:99: in __call__
    h[k] = instantiate()
src/luigi/luigi/task_register.py:80: in instantiate
    return super(Register, cls).__call__(*args, **kwargs)
src/luigi/luigi/task.py:436: in __init__
    self.task_id = task_id_str(self.get_task_family(), self.to_str_params(only_significant=True))
src/luigi/luigi/task.py:480: in to_str_params
    params_str[param_name] = params[param_name].serialize(param_value)
src/luigi/luigi/parameter.py:950: in serialize
    return json.dumps(x)
../../.conda/envs/ba4cb347467d53d3d416b4f1f130cdeb/lib/python3.8/json/__init__.py:231: in dumps
    return _default_encoder.encode(obj)
../../.conda/envs/ba4cb347467d53d3d416b4f1f130cdeb/lib/python3.8/json/encoder.py:199: in encode
    chunks = self.iterencode(o, _one_shot=True)
../../.conda/envs/ba4cb347467d53d3d416b4f1f130cdeb/lib/python3.8/json/encoder.py:257: in iterencode
    return _iterencode(o, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x7f4e3b005eb0>
o = <FrozenOrderedDict OrderedDict([('foo', 'bar')])>

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type _FrozenOrderedDict is not JSON serializable

../../.conda/envs/ba4cb347467d53d3d416b4f1f130cdeb/lib/python3.8/json/encoder.py:179: TypeError
=============================== warnings summary ===============================
src/luigi/luigi/parameter.py:28
  /home/user/projects/luigi/src/luigi/luigi/parameter.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    from collections import OrderedDict, Mapping

src/luigi/luigi/scheduler.py:208
  /home/user/projects/luigi/src/luigi/luigi/scheduler.py:208: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    class OrderedSet(collections.MutableSet):

src/luigi/luigi/scheduler.py:98: 29 tests with warnings
  /home/user/projects/luigi/src/luigi/luigi/scheduler.py:98: DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()
    fn_args = inspect.getargspec(fn)

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/parameter_test.py::TestParametersHashability::test_list_dict - Ty...
======================== 1 failed, 31 warnings in 1.04s ========================
RUN EVERY COMMAND
1
pytest test/parameter_test.py::TestParametersHashability::test_list_dict

============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
benchmark: 3.2.3 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/user/projects/luigi
plugins: sugar-0.9.3, benchmark-3.2.3, sanic-1.6.1, cov-2.9.0
collected 1 item

test/parameter_test.py F                                                 [100%]

=================================== FAILURES ===================================
__________________ TestParametersHashability.test_tuple_dict ___________________

self = <parameter_test.TestParametersHashability testMethod=test_tuple_dict>

    def test_tuple_dict(self):
        class Foo(luigi.Task):
            args = luigi.parameter.TupleParameter()
    
        p = luigi.parameter.TupleParameter()
>       self.assertEqual(hash(Foo(args=({'foo': 'bar'}, {'doge': 'wow'})).args),
                         hash(p.normalize(p.parse('({"foo": "bar"}, {"doge": "wow"})'))))
E       TypeError: unhashable type: 'dict'

test/parameter_test.py:408: TypeError
=============================== warnings summary ===============================
src/luigi/luigi/parameter.py:28
  /home/user/projects/luigi/src/luigi/luigi/parameter.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    from collections import OrderedDict, Mapping

src/luigi/luigi/scheduler.py:208
  /home/user/projects/luigi/src/luigi/luigi/scheduler.py:208: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working
    class OrderedSet(collections.MutableSet):

src/luigi/luigi/scheduler.py:98: 29 tests with warnings
  /home/user/projects/luigi/src/luigi/luigi/scheduler.py:98: DeprecationWarning: inspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()
    fn_args = inspect.getargspec(fn)

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED test/parameter_test.py::TestParametersHashability::test_tuple_dict - T...
======================== 1 failed, 31 warnings in 0.23s ========================
