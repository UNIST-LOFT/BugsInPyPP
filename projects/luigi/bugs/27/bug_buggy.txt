pytest test/parameter_test.py::TestParamWithDefaultFromConfig::testCommandLineWithDefault
pytest test/parameter_test.py::TestParamWithDefaultFromConfig::testCommandLineNoDefault
RUN EVERY COMMAND
0


============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/user/BugsInPy/temp/projects/luigi
collected 1 item

test/parameter_test.py F                                                 [100%]

=================================== FAILURES ===================================
__________ TestParamWithDefaultFromConfig.testCommandLineWithDefault ___________

self = <parameter_test.TestParamWithDefaultFromConfig testMethod=testCommandLineWithDefault>

    @with_config({"MyClass": {"p_not_global": "123"}})
    def testCommandLineWithDefault(self):
        """
        Verify that we also read from the config when we build tasks from the
        command line parsers.
        """
        class MyClass(luigi.Task):
            p_not_global = luigi.Parameter(default='banana')
    
            def complete(self):
                import sys
                luigi.configuration.get_config().write(sys.stdout)
                if self.p_not_global != "123":
                    raise ValueError("The parameter didn't get set!!")
                return True
    
            def run(self):
                pass
    
>       self.assertTrue(self.run_and_check(['MyClass']))
E       AssertionError: False is not true

test/parameter_test.py:680: AssertionError
----------------------------- Captured stdout call -----------------------------
[MyClass]
p_not_global = 123

----------------------------- Captured stderr call -----------------------------
DEBUG: Checking if MyClass(p_not_global=banana) is complete
WARNING: Will not schedule MyClass(p_not_global=banana) or any dependencies due to error in complete() method:
Traceback (most recent call last):
  File "/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/worker.py", line 211, in check_complete
    is_complete = task.complete()
  File "/home/user/BugsInPy/temp/projects/luigi/test/parameter_test.py", line 674, in complete
    raise ValueError("The parameter didn't get set!!")
ValueError: The parameter didn't get set!!

INFO: Skipping error email. Set `error-email` in the `core` section of the luigi config file to receive error emails.
INFO: Done scheduling tasks
INFO: Running Worker with 1 processes
DEBUG: Asking scheduler for work...
INFO: Done
INFO: There are no more tasks to run at this time
INFO: Worker Worker(salt=701329232, workers=1, host=4178772b82f0, username=root, pid=12884) was stopped. Shutting down Keep-Alive thread
------------------------------ Captured log call -------------------------------
DEBUG    luigi-interface:worker.py:209 Checking if MyClass(p_not_global=banana) is complete
WARNING  luigi-interface:worker.py:362 Will not schedule MyClass(p_not_global=banana) or any dependencies due to error in complete() method:
Traceback (most recent call last):
  File "/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/worker.py", line 211, in check_complete
    is_complete = task.complete()
  File "/home/user/BugsInPy/temp/projects/luigi/test/parameter_test.py", line 674, in complete
    raise ValueError("The parameter didn't get set!!")
ValueError: The parameter didn't get set!!

INFO     luigi-interface:notifications.py:178 Skipping error email. Set `error-email` in the `core` section of the luigi config file to receive error emails.
INFO     luigi-interface:interface.py:172 Done scheduling tasks
INFO     luigi-interface:worker.py:673 Running Worker with 1 processes
DEBUG    luigi-interface:worker.py:516 Asking scheduler for work...
INFO     luigi-interface:worker.py:505 Done
INFO     luigi-interface:worker.py:506 There are no more tasks to run at this time
INFO     luigi-interface:worker.py:257 Worker Worker(salt=701329232, workers=1, host=4178772b82f0, username=root, pid=12884) was stopped. Shutting down Keep-Alive thread
=============================== warnings summary ===============================
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
  /opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52: DeprecationWarning: is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it
    return function(*args, **kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/parameter_test.py::TestParamWithDefaultFromConfig::testCommandLineWithDefault
======================== 1 failed, 3 warnings in 0.14s =========================
RUN EVERY COMMAND
1
pytest test/parameter_test.py::TestParamWithDefaultFromConfig::testCommandLineWithDefault

============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/user/BugsInPy/temp/projects/luigi
collected 1 item

test/parameter_test.py F                                                 [100%]

=================================== FAILURES ===================================
___________ TestParamWithDefaultFromConfig.testCommandLineNoDefault ____________

self = <parameter_test.TestParamWithDefaultFromConfig testMethod=testCommandLineNoDefault>

    @with_config({"MyClass2": {"p_not_global_no_default": "123"}})
    def testCommandLineNoDefault(self):
        """
        Verify that we also read from the config when we build tasks from the
        command line parsers.
        """
        class MyClass2(luigi.Task):
            """ TODO: Make luigi clean it's register for tests. Hate this 2 dance. """
            p_not_global_no_default = luigi.Parameter()
    
            def complete(self):
                import sys
                luigi.configuration.get_config().write(sys.stdout)
                luigi.configuration.get_config().write(sys.stdout)
                if self.p_not_global_no_default != "123":
                    raise ValueError("The parameter didn't get set!!")
                return True
    
            def run(self):
                pass
    
>       self.assertTrue(self.run_and_check(['MyClass2']))

test/parameter_test.py:705: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test/parameter_test.py:478: in run_and_check
    run_exit_status = luigi.run(['--local-scheduler', '--no-lock'] + args)
/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/interface.py:421: in run
    tasks = interface.parse(cmdline_args, main_task_cls=main_task_cls)
/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/interface.py:302: in parse
    return self.parse_task(cmdline_args, main_task_cls)
/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/interface.py:297: in parse_task
    task_params = get_task_parameters(task_cls, args)
/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/interface.py:232: in get_task_parameters
    param.parse_from_args(param_name, task_cls.task_family, args, params)
/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/parameter.py:359: in parse_from_args
    params[param_name] = self.parse_from_input(param_name, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <luigi.parameter.Parameter object at 0x7f7d2b48fbb0>
param_name = 'p_not_global_no_default', x = None

    def parse_from_input(self, param_name, x):
        """
        Parses the parameter value from input ``x``, handling defaults and is_list.
    
        :param param_name: the name of the parameter. This is used for the message in
                           ``MissingParameterException``.
        :param x: the input value to parse.
        :raises MissingParameterException: if x is false-y and no default is specified.
        """
        if not x:
            if self.has_value:
                return self.value
            elif self.is_bool:
                return False
            elif self.is_list:
                return []
            else:
>               raise MissingParameterException("No value for '%s' (%s) submitted and no default value has been assigned." %
E               luigi.parameter.MissingParameterException: No value for 'p_not_global_no_default' (--p-not-global-no-default) submitted and no default value has been assigned.

/opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/parameter.py:299: MissingParameterException
=============================== warnings summary ===============================
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
../../../../../../opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52
  /opt/conda/envs/ef9eb8a6a8961f35f2fb480a4ad77520/lib/python3.8/site-packages/luigi-1.1.3-py3.8.egg/luigi/deprecate_kwarg.py:52: DeprecationWarning: is_global is deprecated and will be removed. Please use either  (a) class level config (eg. --MyTask-my-param 42) (b) a separate Config class with global settings on it
    return function(*args, **kwargs)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/parameter_test.py::TestParamWithDefaultFromConfig::testCommandLineNoDefault
======================== 1 failed, 3 warnings in 0.11s =========================
