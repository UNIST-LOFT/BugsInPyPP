python3 -m pytest tqdm/tests/tests_contrib.py::test_enumerate
RUN EVERY COMMAND
0


============================= test session starts ==============================
platform linux -- Python 3.6.9, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/tqdm
collected 1 item

tqdm/tests/tests_contrib.py FE                                           [100%]

==================================== ERRORS ====================================
_____________________ ERROR at teardown of test_enumerate ______________________

    def posttest():
        if getattr(tqdm, "_instances", False):
            n = len(tqdm._instances)
            if n:
                tqdm._instances.clear()
                raise EnvironmentError(
>                   "{0} `tqdm` instances still in existence POST-test".format(n))
E               OSError: 1 `tqdm` instances still in existence POST-test

tqdm/tests/tests_tqdm.py:142: OSError
=================================== FAILURES ===================================
________________________________ test_enumerate ________________________________

    @with_setup(pretest, posttest)
    def test_enumerate():
        """Test contrib.tenumerate"""
        with closing(StringIO()) as our_file:
            a = range(9)
            assert list(tenumerate(a, file=our_file)) == list(enumerate(a))
>           assert list(tenumerate(a, 42, file=our_file)) == list(enumerate(a, 42))

tqdm/tests/tests_contrib.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tqdm/contrib/__init__.py:41: in tenumerate
    return enumerate(tqdm_class(iterable, start, **tqdm_kwargs))
tqdm/std.py:1026: in __init__
    self.refresh(lock_args=self.lock_args)
tqdm/std.py:1311: in refresh
    self.display()
tqdm/std.py:1435: in display
    self.sp(self.__repr__() if msg is None else msg)
tqdm/std.py:1065: in __repr__
    return self.format_meter(**self.format_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

n = 0, total = 9, elapsed = 0, ncols = None, prefix = 42, ascii = True
unit = 'it', unit_scale = False, rate = None, bar_format = None, postfix = ''
unit_divisor = 1000, extra_kwargs = {}, elapsed_str = '00:00', inv_rate = None
format_sizeof = <function tqdm.format_sizeof at 0x7f64f28fe950>
rate_noinv_fmt = '?it/s', rate_inv_fmt = '?s/it', rate_fmt = '?it/s'
n_fmt = '0'

    @staticmethod
    def format_meter(n, total, elapsed, ncols=None, prefix='', ascii=False,
                     unit='it', unit_scale=False, rate=None, bar_format=None,
                     postfix=None, unit_divisor=1000, **extra_kwargs):
        """
        Return a string-based progress bar given some parameters
    
        Parameters
        ----------
        n  : int or float
            Number of finished iterations.
        total  : int or float
            The expected total number of iterations. If meaningless (None),
            only basic progress statistics are displayed (no ETA).
        elapsed  : float
            Number of seconds passed since start.
        ncols  : int, optional
            The width of the entire output message. If specified,
            dynamically resizes `{bar}` to stay within this bound
            [default: None]. If `0`, will not print any bar (only stats).
            The fallback is `{bar:10}`.
        prefix  : str, optional
            Prefix message (included in total width) [default: ''].
            Use as {desc} in bar_format string.
        ascii  : bool, optional or str, optional
            If not set, use unicode (smooth blocks) to fill the meter
            [default: False]. The fallback is to use ASCII characters
            " 123456789#".
        unit  : str, optional
            The iteration unit [default: 'it'].
        unit_scale  : bool or int or float, optional
            If 1 or True, the number of iterations will be printed with an
            appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)
            [default: False]. If any other non-zero number, will scale
            `total` and `n`.
        rate  : float, optional
            Manual override for iteration rate.
            If [default: None], uses n/elapsed.
        bar_format  : str, optional
            Specify a custom bar string formatting. May impact performance.
            [default: '{l_bar}{bar}{r_bar}'], where
            l_bar='{desc}: {percentage:3.0f}%|' and
            r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '
              '{rate_fmt}{postfix}]'
            Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,
              percentage, elapsed, elapsed_s, ncols, desc, unit,
              rate, rate_fmt, rate_noinv, rate_noinv_fmt,
              rate_inv, rate_inv_fmt, postfix, unit_divisor,
              remaining, remaining_s.
            Note that a trailing ": " is automatically removed after {desc}
            if the latter is empty.
        postfix  : *, optional
            Similar to `prefix`, but placed at the end
            (e.g. for additional stats).
            Note: postfix is usually a string (not a dict) for this method,
            and will if possible be set to postfix = ', ' + postfix.
            However other types are supported (#382).
        unit_divisor  : float, optional
            [default: 1000], ignored unless `unit_scale` is True.
    
        Returns
        -------
        out  : Formatted meter and stats, ready to display.
        """
    
        # sanity check: total
        if total and n >= (total + 0.5):  # allow float imprecision (#849)
            total = None
    
        # apply custom scale if necessary
        if unit_scale and unit_scale not in (True, 1):
            if total:
                total *= unit_scale
            n *= unit_scale
            if rate:
                rate *= unit_scale  # by default rate = 1 / self.avg_time
            unit_scale = False
    
        elapsed_str = tqdm.format_interval(elapsed)
    
        # if unspecified, attempt to use rate = average speed
        # (we allow manual override since predicting time is an arcane art)
        if rate is None and elapsed:
            rate = n / elapsed
        inv_rate = 1 / rate if rate else None
        format_sizeof = tqdm.format_sizeof
        rate_noinv_fmt = ((format_sizeof(rate) if unit_scale else
                           '{0:5.2f}'.format(rate))
                          if rate else '?') + unit + '/s'
        rate_inv_fmt = ((format_sizeof(inv_rate) if unit_scale else
                         '{0:5.2f}'.format(inv_rate))
                        if inv_rate else '?') + 's/' + unit
        rate_fmt = rate_inv_fmt if inv_rate and inv_rate > 1 else rate_noinv_fmt
    
        if unit_scale:
            n_fmt = format_sizeof(n, divisor=unit_divisor)
            total_fmt = format_sizeof(total, divisor=unit_divisor) \
                if total is not None else '?'
        else:
            n_fmt = str(n)
            total_fmt = str(total) if total is not None else '?'
    
        try:
            postfix = ', ' + postfix if postfix else ''
        except TypeError:
            pass
    
        remaining = (total - n) / rate if rate and total else 0
        remaining_str = tqdm.format_interval(remaining) if rate else '?'
    
        # format the stats displayed to the left and right sides of the bar
        if prefix:
            # old prefix setup work around
>           bool_prefix_colon_already = (prefix[-2:] == ": ")
E           TypeError: 'int' object is not subscriptable

tqdm/std.py:423: TypeError
=============================== warnings summary ===============================
/opt/conda/envs/30e3dc759bf3510e44715fc0a8fe8406/lib/python3.6/site-packages/nose/config.py:178
  /opt/conda/envs/30e3dc759bf3510e44715fc0a8fe8406/lib/python3.6/site-packages/nose/config.py:178: DeprecationWarning: invalid escape sequence \.
    """

/opt/conda/envs/30e3dc759bf3510e44715fc0a8fe8406/lib/python3.6/site-packages/nose/importer.py:12
  /opt/conda/envs/30e3dc759bf3510e44715fc0a8fe8406/lib/python3.6/site-packages/nose/importer.py:12: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    from imp import find_module, load_module, acquire_lock, release_lock

-- Docs: https://docs.pytest.org/en/latest/warnings.html
=========================== short test summary info ============================
FAILED tqdm/tests/tests_contrib.py::test_enumerate - TypeError: 'int' object ...
ERROR tqdm/tests/tests_contrib.py::test_enumerate - OSError: 1 `tqdm` instanc...
==================== 1 failed, 2 warnings, 1 error in 1.79s ====================
