pytest pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d
RUN EVERY COMMAND
0


============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1
rootdir: /home/user/BugsInPy/temp/projects/pandas, inifile: setup.cfg
plugins: hypothesis-5.16.0
collected 66 items

pandas/tests/indexing/test_indexing.py ..FFFFFF..F...................... [ 50%]
.................................                                        [100%]

=================================== FAILURES ===================================
______ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-Index0] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de27afa60>
index = Index(['GCr1ci0gor', 'UbGe1BBXWr', 'odghSVw13L', 'PgShtVpJhM', 'xTEaqxoBtY'], dtype='object')
obj = GCr1ci0gor    0
UbGe1BBXWr    1
odghSVw13L    2
PgShtVpJhM    3
xTEaqxoBtY    4
dtype: int64
idxr = GCr1ci0gor    0
UbGe1BBXWr    1
odghSVw13L    2
PgShtVpJhM    3
xTEaqxoBtY    4
dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
______ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-Index1] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de27a6310>
index = Index(['ץ7נ7כיעץר2', 'ןץ3א5ה0נט0', 'ופ9הל0זהלב', 'פ9בחקוךרל0', 'צ5ד71קנםא6'], dtype='object')
obj = ץ7נ7כיעץר2    0
ןץ3א5ה0נט0    1
ופ9הל0זהלב    2
פ9בחקוךרל0    3
צ5ד71קנםא6    4
dtype: int64
idxr = ץ7נ7כיעץר2    0
ןץ3א5ה0נט0    1
ופ9הל0זהלב    2
פ9בחקוךרל0    3
צ5ד71קנםא6    4
dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
___ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-DatetimeIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de2be2190>
index = DatetimeIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
               '2000-01-07'],
              dtype='datetime64[ns]', freq='B')
obj = 2000-01-03    0
2000-01-04    1
2000-01-05    2
2000-01-06    3
2000-01-07    4
Freq: B, dtype: int64
idxr = 2000-01-03    0
2000-01-04    1
2000-01-05    2
2000-01-06    3
2000-01-07    4
Freq: B, dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
____ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-PeriodIndex] ____

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de2c744c0>
index = PeriodIndex(['2000-01-03', '2000-01-04', '2000-01-05', '2000-01-06',
             '2000-01-07'],
            dtype='period[B]', freq='B')
obj = 2000-01-03    0
2000-01-04    1
2000-01-05    2
2000-01-06    3
2000-01-07    4
Freq: B, dtype: int64
idxr = 2000-01-03    0
2000-01-04    1
2000-01-05    2
2000-01-06    3
2000-01-07    4
Freq: B, dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
__ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-TimedeltaIndex] ___

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de2710400>
index = TimedeltaIndex(['1 days', '2 days', '3 days', '4 days', '5 days'], dtype='timedelta64[ns]', freq='D')
obj = 1 days    0
2 days    1
3 days    2
4 days    3
5 days    4
Freq: D, dtype: int64
idxr = 1 days    0
2 days    1
3 days    2
4 days    3
5 days    4
Freq: D, dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
______ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-Index2] _______

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de240a730>
index = Index([False, True, False, False, False], dtype='object')
obj = False    0
True     1
False    2
False    3
False    4
dtype: int64
idxr = False    0
True     1
False    2
False    3
False    4
dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
_ TestFancy.test_getitem_ndarray_3d[<lambda>-getitem-Series-CategoricalIndex] __

self = <pandas.tests.indexing.test_indexing.TestFancy object at 0x7f1de3024f10>
index = CategoricalIndex(['IMdh', 'FflC', 'GQlJ', 'IMdh', 'FflC'], categories=['IMdh', 'FflC', 'GQlJ'], ordered=False, dtype='category')
obj = IMdh    0
FflC    1
GQlJ    2
IMdh    3
FflC    4
dtype: int64
idxr = IMdh    0
FflC    1
GQlJ    2
IMdh    3
FflC    4
dtype: int64
idxr_id = 'getitem'

    @pytest.mark.parametrize(
        "index", tm.all_index_generator(5), ids=lambda x: type(x).__name__
    )
    @pytest.mark.parametrize(
        "obj",
        [
            lambda i: Series(np.arange(len(i)), index=i),
            lambda i: DataFrame(np.random.randn(len(i), len(i)), index=i, columns=i),
        ],
        ids=["Series", "DataFrame"],
    )
    @pytest.mark.parametrize(
        "idxr, idxr_id",
        [
            (lambda x: x, "getitem"),
            (lambda x: x.loc, "loc"),
            (lambda x: x.iloc, "iloc"),
        ],
    )
    def test_getitem_ndarray_3d(self, index, obj, idxr, idxr_id):
        # GH 25567
        obj = obj(index)
        idxr = idxr(obj)
        nd3 = np.random.randint(5, size=(2, 2, 2))
    
        msg = "|".join(
            [
                r"Buffer has wrong number of dimensions \(expected 1, got 3\)",
                "Cannot index with multidimensional key",
                r"Wrong number of dimensions. values.ndim != ndim \[3 != 1\]",
                "Index data must be 1-dimensional",
            ]
        )
    
        with pytest.raises(ValueError, match=msg):
            with tm.assert_produces_warning(DeprecationWarning, check_stacklevel=False):
>               idxr[nd3]
E               Failed: DID NOT RAISE <class 'ValueError'>

pandas/tests/indexing/test_indexing.py:94: Failed
=========================== short test summary info ============================
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-Index0]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-Index1]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-DatetimeIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-PeriodIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-TimedeltaIndex]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-Index2]
FAILED pandas/tests/indexing/test_indexing.py::TestFancy::test_getitem_ndarray_3d[<lambda>-getitem-Series-CategoricalIndex]
========================= 7 failed, 59 passed in 0.57s =========================
