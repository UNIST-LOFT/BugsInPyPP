#!/bin/bash
# set -e

###bugsinpy-testall reproduces all the bugs for every project
# test ok (reproduced successfully) test fail (unable to reproduce)
# Files bug_fixed.txt and bug_buggy.txt are added to each project bug
# Index result in BugsInPy/projects/index.csv
# Full setup logs in temp/$project/logs.txt 

DIR="/home/user"
INDEX="$DIR/BugsInPy/projects/index.csv"

usage="
       -h
             show this help
       -c
             cleanup temp directory
       -p
             specify multiple project:start:end or project:end or project:
             Ex;
             pandas:75:100 (reproduce tests 75 to 100 for pandas)
             black:5 ansible: (only reproduces test 5 for black and all for ansible)
"

case $1 in
 -[h?] | --help)
    echo "Usage: ${0##*/} [ --help ]"
    echo "$usage"
    exit 0;;
 -c)
    rm -rf $DIR/projects/*
    touch .gitkeep
    exit 0;;
 -p)
    projects="${@:2}";;
esac

mkdir -p $DIR/projects

if ! echo $projects | grep -q ":"; then
  projects=$(ls $DIR/BugsInPy/projects)
fi

if [ ! -f $INDEX ]; then
  echo "repo,bugid,version,result" > $INDEX
fi

# Iterate over the projects
for project in $projects; do

  # Get the number of bugs in the project
  if ! echo $projects | grep -q ":"; then
    start=1
    finish=$(ls $DIR/BugsInPy/projects/$project/bugs | wc -l)
  else
    start=$(echo $project | cut -d ":" -f 2)
    finish=$(echo $project | cut -d ":" -f 3)
    project=$(echo $project | cut -d ":" -f 1)
    if [[ "$start" == "" ]]; then
      finish=$(ls $DIR/BugsInPy/projects/$project/bugs | wc -l)
      start=1
    elif [[ "$finish" == "" ]]; then
      finish=$start
    fi
  fi

  # For each bug, execute the test
  for bug in $(seq $start $finish); do

    BUG_SOURCE_DIR="$DIR/BugsInPy/projects/$project/bugs/$bug"
    if ! grep "$project,$bug," $INDEX && [ -d "$BUG_SOURCE_DIR" ]; then
      touch $BUG_SOURCE_DIR/requirements.txt
      work_dir="$DIR/projects/$project"
      projects_dir="$DIR/projects"
      BUG_INFO="$work_dir/bugsinpy_bug.info"

      # Test buggy (0) version
      bugsinpy-checkout -p $project -v 0 -i $bug -w $projects_dir &>> /dev/null

      cd $work_dir

      ###Required to use conda activate, included in docker continuumio/miniconda3
      . /opt/conda/etc/profile.d/conda.sh &>> $work_dir/logs.txt
      ###Setup proper python version already installed using miniconda
      bug_python_version=$(grep -o "3\..\.." $BUG_INFO)

      ###Add environment
      REQUIREMENTS="$work_dir/bugsinpy_requirements.txt"
      dos2unix $REQUIREMENTS &>/dev/null
      . /opt/conda/etc/profile.d/conda.sh
      sed -i -e '/^\s*#.*$/d' -e '/^\s*$/d' "$REQUIREMENTS"
      bug_python_version=$(grep -o "3\..\.." "$BUG_INFO")
      conda_env_name=$(cat <(echo $bug_python_version) "$REQUIREMENTS" | md5sum | cut -d' ' -f 1)
      if conda env list | grep -q "$conda_env_name"; then
        touch "$work_dir/bugsinpy_compile_flag"
      else
        conda create -n $conda_env_name -y python=$bug_python_version pytest &>> $work_dir/logs.txt
        bugsinpy-compile &>> $work_dir/logs.txt
      fi

      bugsinpy-test &> $BUG_SOURCE_DIR/bug_buggy.txt

      # Make sure a failure is detected in buggy version and bug is reproducible
      if grep -q "= FAILURES =" $BUG_SOURCE_DIR/bug_buggy.txt || \
         grep -q "FAILED (" $BUG_SOURCE_DIR/bug_buggy.txt
      then
        echo "$project,$bug,buggy,fail" | tee -a $INDEX
      elif grep -q "= ERRORS =" $BUG_SOURCE_DIR/bug_buggy.txt || \
         grep -q ": command not found" $BUG_SOURCE_DIR/bug_buggy.txt || \
         grep -q "You have not compile this project" $BUG_SOURCE_DIR/bug_buggy.txt
      then
        echo "$project,$bug,buggy,error" | tee -a $INDEX
      elif grep -qwE "passed|OK" $BUG_SOURCE_DIR/bug_buggy.txt; then
        echo "$project,$bug,buggy,pass" | tee -a $INDEX
      else
        echo "$project,$bug,buggy,unknown" | tee -a $INDEX
      fi

      # echo $LINENO # debug

      # Test fixed (1) version
      bugsinpy-checkout -p $project -v 1 -i $bug -w $DIR/projects &>> $work_dir/logs.txt

      ### Check for same enviroment and avoid recompiling
      dos2unix $REQUIREMENTS &>/dev/null
      sed -i -e '/^\s*#.*$/d' -e '/^\s*$/d' "$REQUIREMENTS"
      bug_python_version=$(grep -o "3\..\.." "$BUG_INFO")
      conda_env_name=$(cat <(echo $bug_python_version) "$REQUIREMENTS" | md5sum | cut -d' ' -f 1)
      if conda env list | grep -q "$conda_env_name"; then
        touch "$work_dir/bugsinpy_compile_flag"
      else
        conda create -n $conda_env_name -y python=$bug_python_version pytest &>> $work_dir/logs.txt
        bugsinpy-compile &>> $work_dir/logs.txt
      fi
      bugsinpy-test &> $BUG_SOURCE_DIR/bug_fixed.txt

      # Test execution output and make sure fixed version passes test ok
      if grep -q "= FAILURES =" $BUG_SOURCE_DIR/bug_fixed.txt || \
         grep -q "FAILED (" $BUG_SOURCE_DIR/bug_fixed.txt
      then
        echo "$project,$bug,fixed,fail" | tee -a $INDEX
      elif grep -q "= ERRORS =" $BUG_SOURCE_DIR/bug_fixed.txt || \
         grep -q ": command not found" $BUG_SOURCE_DIR/bug_fixed.txt || \
         grep -q "You have not compile this project" $BUG_SOURCE_DIR/bug_fixed.txt
      then
        echo "$project,$bug,fixed,error" | tee -a $INDEX
      elif grep -qwE "passed|OK" $BUG_SOURCE_DIR/bug_fixed.txt; then
        echo "$project,$bug,fixed,pass" | tee -a $INDEX
      else
        echo "$project,$bug,fixed,unknown" | tee -a $INDEX
      fi
    fi
  done
done
